{"version":3,"sources":["static/gifs/skateboard.gif","pages/Index.js","pages/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Index","className","src","logo","alt","href","About","url","width","height","display","position","Nav","to","App","path","exact","Boolean","window","location","hostname","match","rootElement","document","querySelector","hasChildNodes","hydrate","StrictMode","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,wC,wLCc5BC,EAXD,kBACb,yBAAKC,UAAU,IACd,4BAAQA,UAAU,IACjB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yCACgB,uBAAGC,KAAK,KAAR,iBAA0B,2C,QCM9BC,EAXD,kBACV,oCACI,kBAAC,IAAD,CAAQC,IAAI,cACRC,MAAM,OACNC,OAAO,SACPC,QAAQ,UACRC,SAAS,aACb,qCCEFC,G,MAAM,kBACX,6BACC,4BACC,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,cAeQC,EAVH,kBACX,kBAAC,IAAD,KACC,kBAAC,EAAD,MACA,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,GAAC,kBAAC,EAAD,OACtB,kBAAC,IAAD,CAAOD,KAAK,UAAS,kBAAC,EAAD,UCdJE,QACU,cAA7BC,OAAOC,SAASC,UAEgB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,oDCZL,IAAMC,EAAcC,SAASC,cAAc,SAEvCF,EAAYG,gBACfC,kBACC,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OACoBL,GAEtBM,iBACC,kBAAC,IAAMD,WAAP,KACC,kBAAC,EAAD,OAEDL,GDkHG,kBAAmBO,WACtBA,UAAUC,cAAcC,MACtBC,MAAK,SAAAC,GACLA,EAAaC,gBAEbC,OAAM,SAAAC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7781623b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/skateboard.9237db2e.gif\";","import React from 'react';\nimport logo from '../static/gifs/skateboard.gif';\n\nconst Index = () => (\n\t<div className=\"\">\n\t\t<header className=\"\">\n\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t<p>\n        Welcome to <a href=\"/\">Duncan Tomlin <code>.com</code></a>\n\t\t\t</p>\n\t\t</header>\n\t</div>\n);\n\nexport default Index;\n","import React from 'react';\nimport Iframe from 'react-iframe'\n\nconst About = () => (\n    <>\n        <Iframe url=\"/about.html\"\n            width=\"100%\"\n            height=\"1000px\"\n            display=\"initial\"\n            position=\"relative\"/>\n        <h1>END</h1>\n    </>\n);\n\nexport default About;\n","import React from 'react';\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute,\n\tLink\n} from 'react-router-dom';\nimport Index from './pages/Index';\nimport About from './pages/About';\n\nimport './App.css';\n\nconst Nav = () => (\n\t<nav>\n\t\t<ul>\n\t\t\t<li><Link to=\"/\">Home</Link></li>\n\t\t\t<li><Link to=\"/about\">About</Link></li>\n\t\t</ul>\n\t</nav>\n);\n\nconst App = () => (\n\t<Router>\n\t\t<Nav/>\n\t\t<Switch>\n\t\t\t<Route path=\"/\" exact><Index /></Route>\n\t\t\t<Route path=\"/about\"><About /></Route>\n\t\t</Switch>\n\t</Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n    \t/^127(?:\\.(?:25[0-5]|2[0-4]\\d|[01]?\\d{1,2})){3}$/\n    )\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: {'Service-Worker': 'script'}\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n        (contentType != null && !contentType.includes('javascript'))\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport {hydrate, render} from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.querySelector('#root');\n\nif (rootElement.hasChildNodes()) {\n\thydrate(\n\t\t<React.StrictMode>\n\t\t\t<App />\n\t\t</React.StrictMode>, rootElement);\n} else {\n\trender(\n\t\t<React.StrictMode>\n\t\t\t<App />\n\t\t</React.StrictMode>,\n\t\trootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}